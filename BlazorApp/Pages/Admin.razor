@page "/admin"

@using System.ComponentModel
@using System.Linq
@using AntDesign.TableModels

@inject ModalService modalService
@inject UserManager<IdentityUser> userManager
@inject ILogger<Admin> logger
@inject NavigationManager navigationManager
@inject SignInManager<IdentityUser> signInManager

<UserCreationForm OnAddUser="@OnAddUser"/>
<Table @ref="table"
       TItem="User"
       DataSource="@users"
       Total="total"
       @bind-PageIndex="pageIndex"
       @bind-PageSize="pageSize"
       @bind-SelectedRows="selectedRows"
       OnChange="OnChange">
    <Selection Key="@(context.Id)" />
    <Column @bind-Field="@context.Id" Sortable />
    <Column @bind-Field="@context.UserName" Sortable />
    <ActionColumn>
        <Space>
            <SpaceItem><Button Danger OnClick="()=>Delete(context.Id)">Delete</Button></SpaceItem>
        </Space>
        <Space>
            <SpaceItem><Button Danger OnClick="()=>BlockUser(context.Id)">Block User</Button></SpaceItem>
        </Space>
    </ActionColumn>
</Table>

<Button OnClick="()=> { pageIndex--; }">Previous page</Button>
<Button OnClick="()=> { pageIndex++; }">Next Page</Button>

@using System.Text.Json;
@using AntDesign
@using BlazorApp.Data
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@code {

    private User[] users;

    private IEnumerable<User> selectedRows;
    private ITable table;

    private int pageIndex = 1;
    private int pageSize = 10;
    private int total = 0;

    private bool visible;
    bool _confirmLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await ResetUserList();
    }

    public async Task OnAddUser()
    {
        await ResetUserList();
    }

    public async Task OnChange(QueryModel<User> queryModel)
    {
        Console.WriteLine(JsonSerializer.Serialize(queryModel));
    }

    public async Task<User[]> GetUsers(int pageIndex, int pageSize)
    {
        IQueryable<IdentityUser> userIdentities = userManager.Users;

        return userIdentities
            .Skip((pageIndex - 1) * pageSize)
            .Select(u => new User() {Id = u.Id, UserName = u.UserName})
            .Take(pageSize)
            .ToArray();
    }

    public void RemoveSelection(string id)
    {
        var selected = selectedRows.Where(x => !x.Id.Equals(id));
        selectedRows = selected;
    }

    private async void Delete(string id)
    {
        var user = userManager.Users.FirstOrDefault(u => u.Id.Equals(id));
        var result = await userManager.DeleteAsync(user);
        if (result.Succeeded)
        {
            logger.LogInformation("User is deleted");
        }
        await ResetUserList();
        total = users.Length;
    }

    private async Task BlockUser(string userId)
    {
        IdentityUser user = await userManager.FindByIdAsync(userId);
        if (user != null)
        {
            user.LockoutEnd = DateTime.Now.AddYears(200);
            await userManager.UpdateAsync(user);
            await userManager.UpdateSecurityStampAsync(user);
        }
    }

    private async Task ResetUserList()
    {
        users = await GetUsers(pageIndex, pageSize);
        StateHasChanged();
    }
}
